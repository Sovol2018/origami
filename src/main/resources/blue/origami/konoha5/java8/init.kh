# java8/init.kh

Bool       = boolean
Int        = int
Float      = double
String     = String

null       = null

# Bool
true:Bool       = true
false:Bool      = false
&:Bool:Bool:Bool = (%s && %s)
|:Bool:Bool:Bool = (%s || %s)
!:Bool:Bool      = (!(%s))

#Int 
0:Int            = %d
+:Int:Int        = +%s
-:Int:Int        = -%s
+:Int:Int:Int    = (%s + %s)
-:Int:Int:Int    = (%s - %s)
*:Int:Int:Int    = (%s * %s)
/:Int:Int:Int    = (%s / %s)
%:Int:Int:Int    = (%s %% %s)

==:Int:Int:Bool  = %s == %s
!=:Int:Int:Bool  = %s != %s
<:Int:Int:Bool   = %s < %s
>:Int:Int:Bool   = %s > %s
<=:Int:Int:Bool  = %s <= %s
>=:Int:Int:Bool  = %s >= %s

<<:Int:Int:Int   = (%s << %s)
>>:Int:Int:Int   = (%s >> %s)
&:Int:Int:Int    = (%s & %s)
|:Int:Int:Int    = (%s | %s)
^:Int:Int:Int    = (%s ^ %s)
!:Int:Int        = ~%s

# Float
0:Float       = %f
Int=>Float           = (double)%s
Float->Int           = (int)%s
+:Float:Float        = +%s
-:Float:Float        = -%s
+:Float:Float:Float    = (%s + %s)
-:Float:Float:Float    = (%s - %s)
*:Float:Float:Float    = (%s * %s)
/:Float:Float:Float    = (%s / %s)
%:Float:Float:Float    = (%s %% %s)

==:Float:Float:Bool  = %s == %s
!=:Float:Float:Bool  = %s != %s
<:Float:Float:Bool   = %s < %s
>:Float:Float:Bool   = %s > %s
<=:Float:Float:Bool  = %s <= %s
>=:Float:Float:Bool  = %s >= %s

#Syntax

comment          = // %s
begin            = {
end              = }
;                = ;
,                = ,
()               = (%s)

module           = final class $|base| {

functype         = '''
public interface %2$s <T> {
  public %1$s apply(%3$s);
}
'''

const            = private static final %1$s %2$s = %3$s;
let              = final %1$s %2$s = %3$s;

function         = private static final %1$s %2$s(%3$s) {
function1        = public static final <T> %1$s %2$s(%3$s) {
return           = return %s;

apply            = %s.apply
funcref          = $|base|::%s

if               = if(%s)
else if          = else if(%s) {
while            = while(%s) {
switch           = switch(%s) {
case             = case %s : %s
#default         = default : %s
ifexpr           = ((%1$s) ? (%2$s) : (%3$s))

lambda           = (%s) -> %s


