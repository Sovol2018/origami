# nezcc file

extension          = rkt

# type

Byte[]->String   = (bytes->string/utf-8 %s)
String->Byte[]   = (string->bytes/utf-8 %s)

Byte[].get       = (string->bytes/utf-8 (substring %1$s %2$s (+ %2$s 1)))
Byte[].quote     = "%s"

Array.size       = (vector-length %s)
Array.get        = (vector-ref %s %s)
Array.new        = (make-vector %2$s)
Array.slice      = (vector-drop (vector-take %1$s %3$s) %2$s)

# syntax

comment          = ; %s
begin            = (
end              = )
;                =

module           = #lang racket

struct           = (define %s%% (class object%% (super-new)
constructor      = (init %2$s)
end constructor  = )
init             = (field [_%s %s])
#field            = (field [_%s %s])

getter           = (get-field _%2$s %1$s)
setter           = (set-field! _%2$s %1$s %3$s)

const            = (define %2$s %3$s)

function         = (define (%2$s %3$s)
param            = %2$s
params           =$|space|
return           = (when #t %s)
block            =

and              = (and %s %s)
or               = (or %s %s)
not              = (not %s)
eq               = (= %s %s)
>                = (> %s %s)
<                = (< %s %s)
+                = (+ %s %s)
-                = (- %s %s)
*                = (* %s %s)
/                = (/ %s %s)
%                = (modulo %s %s)


ifexpr           = (if %1$s (begin %2$s) (begin %3$s))
# FIXME divide class const
funccall         = (%s %s)
args             =

true             = #t
false            = #f
null             = null

val              = (define %2$s %3$s)
var              = (define %2$s %3$s)
assign           = (set! %s %s)

array            = (vector$|space|
arrays           =$|space|
end array        = )
if               = (if %s
switch           = (match %s
case             = [%s %s]
default          = [_ %s]

lambda           = (lambda (%s) %s)

def endT = '''
(define (gettag ntag)
  (when #t (vector-ref nezsymbols ntag))
)
(define (getlabel nlabel)
  (when #t (vector-ref nezsymbols nlabel))
)
(define (getvalue nvalue)
  (when #t (vector-ref nezvalues nvalue))
)
(define (getlength nvalue)
  (when #t (vector-ref nezvaluesizes nvalue))
)
(define (recT px tcur ntag nvalue epos cnt)
  (when #t (if (= (get-field _op tcur) 0) (begin
                                            (set-field! _tree px (if (= nvalue 0) (begin ((get-field _newFunc px)
                                                                          (gettag ntag)
                                                                          (get-field _inputs px)
                                                                          (get-field _log tcur) epos cnt)
                                                                  )
                                                                  (begin ((get-field _newFunc px) (gettag ntag) (getvalue nvalue) 0 (getlength nvalue) cnt))))
                                            (set! tcur (get-field _treeLog px))
                                            (rLog (get-field _treeLog px) cnt px)

                                          )
               (begin (recT px (get-field _prevLog tcur) (if (and (= ntag 0) (= (get-field _op tcur) 1)) (begin (get-field _log tcur)) (begin ntag)) (if (and (= nvalue 0) (= (get-field _op tcur) 2)) (begin (get-field _log tcur)) (begin nvalue)) epos (if (= (get-field _op tcur) 3) (begin (+ cnt 1)) (begin cnt))))))
)
(define (rLog tcur cnt px)
  (when #t (if (= (get-field _op tcur) 0) (begin (get-field _prevLog tcur))
                                          (begin
                                            (if (= (get-field _op tcur) 3) (begin (set! cnt (- cnt 1)) (set-field! _tree px ((get-field _setFunc px) (get-field _tree px) cnt (getlabel (get-field _log tcur)) (get-field _tree tcur)))) (begin cnt))
                                            (rLog (get-field _prevLog tcur) cnt px))))
)
(define (endT px shift ntag)
  (set-field! _treeLog px (recT px (get-field _treeLog px) ntag 0 (+ (get-field _pos px) shift) 0))
  (when #t #t)
)
'''
def tagT = '''
(define (tagT px ntag)
  (when #t (logT px 1 ntag (make-vector 0 null)))
)
'''

def beginT = '''
(define (beginT px shift)
   (when #t (logT px 0 (+ (get-field _pos px) shift) (make-vector 0 null)))
)
'''

def newMemos = '''
(define (rMemo memos tree cnt length)
  (if (< cnt length)
      (begin
        (vector-set! memos cnt (new MemoEntry% [key -1] [memoPoint -1] [result 0] [pos 0] [tree tree] [state null]))
        (rMemo memos tree (+ cnt 1) length)
      )
      (begin memos)
      )
)

(define (newMemos tree length)
  (when #t (rMemo (make-vector length) tree 0 length))
)
'''

def logT = '''
(define (useTreeLog px)
  (define tcur (get-field _treeLog px))
  (match (get-field _nextLog tcur)
    [null (set-field! _nextLog tcur (new TreeLog% [op 0] [log 0] [tree (make-vector 0 null)] [prevLog (get-field _treeLog px)] [nextLog null]))]
  )
  (when #t (get-field _nextLog tcur))
)

(define (logT px op log tree)
  (define tcur (useTreeLog px))
  (set-field! _op tcur op)
  (set-field! _log tcur log)
  (set-field! _tree tcur tree)
  (set-field! _treeLog px tcur)
  (when #t #t)
)
'''

def parse = '''
(define (parse inputs length newFunc setFunc)
  (define tree (newFunc (gettag 0) inputs 0 length 0))
  (define px (new NezParserContext% [inputs inputs] [length length] [pos 0] [headpos 0] [tree tree] [treeLog (new TreeLog% [op 0] [log 0] [tree tree] [prevLog null] [nextLog null])] [newFunc (if (null? newFunc) (begin newAST) (begin newFunc))] [setFunc (if (null? setFunc) (begin subAST) (begin setFunc))] [state null] [memos (newMemos tree 257)]))
  (set! tree (if (e0 px) (begin (get-field _tree px)) (begin (newFunc (gettag nezerror) inputs (get-field _headpos px) length 0))))
  (when #t tree)
)
'''

imports = '''
'''

libs = '''
(define TList% (class object% (super-new)
    (init label tree next)
    (field [_label label])
    (field [_tree tree])
    (field [_next next])
  )
)
'''

def newAST = '''
(define (newAST tag inputs pos epos size)
  (if (= size 0)
    (vector tag (bytes->string/utf-8 (list->bytes (vector->list (vector-drop (vector-take inputs epos) pos)))) )
    (vector tag (make-vector 0 null))
  )
)
'''

def subAST = '''
(define (subAST parent n label child)
  (define len (vector-length (vector-ref parent 1)))
  (if (< n len) #t (vector-set! parent 1 (vector-append (vector-ref parent 1) (make-vector (- n (- len 1)) null) )))
  (vector-set! (vector-ref parent 1) n (vector label child))
  (when #t parent)
)
'''

main = '''
(define (read_inputs file-name)
  (let ((p (open-input-file file-name)))
    (let loop((ls1 '()) (c (read-byte p)))
      (if (eof-object? c)
	  (begin
	    (close-input-port p)
	    (list->vector (append (reverse ls1) (list 0))))
	  (loop (cons c ls1) (read-byte p))))))

(define (main args)
  (begin
    (define i 0)
    (define buf (read_inputs (vector-ref args i)))
    (define len (vector-length args))
    (do (
          (i 0 (+ i 1))
          (buf (read_inputs (vector-ref args i)) (read_inputs (vector-ref args i)))
          (st (current-inexact-milliseconds) (current-inexact-milliseconds))
          (t (parse buf (- (vector-length buf) 1) newAST subAST ) (parse buf (- (vector-length buf) 1) newAST subAST ))
          (et (current-inexact-milliseconds) (current-inexact-milliseconds))
        )
        ((> i (- len 1)))
        (print (vector-ref args i))
        (print " ")
        (print (- et st))
        (print "[ms]: ")
        (newline)
        (print t)
        (newline)
    )
  )
)

(main (current-command-line-arguments)
'''
# Match the number of parentheses

man = '''
=============
 QUICK START
=============

raco make $|base|.rkt
racket compiled/$|base|_rkt.zo <file>

or

racket $|base|.rkt <file>

'''

# byte -> byte string
